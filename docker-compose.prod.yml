version: '3.8'

services:
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rinawarp-network

  nginx:
    image: nginx:alpine
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      api:
        condition: service_healthy
    networks:
      - rinawarp-network
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rinawarp-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rinawarp-network
    restart: unless-stopped

  backup:
    image: postgres:14-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data:ro
      - ${BACKUP_DIR:-./backups}:/backups
      - ./scripts/backup-encrypt.sh:/usr/local/bin/backup-encrypt
      - backup-keys:/etc/rinawarp:ro
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGHOST=db
      - PGUSER=${DB_USER}
      - PGDATABASE=${DB_NAME}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    command: |
      bash -c '
        mkdir -p /backups
        # Ensure backup encryption key exists
        if [ ! -f "/etc/rinawarp/backup.key" ]; then
          mkdir -p /etc/rinawarp
          echo "${BACKUP_ENCRYPTION_KEY}" > /etc/rinawarp/backup.key
          chmod 600 /etc/rinawarp/backup.key
        fi
        while true; do
          BACKUP_FILE="/backups/backup-$$(date +%Y%m%d-%H%M%S).sql"
          # Create backup
          pg_dump -Fc > "${BACKUP_FILE}.tmp"
          # Encrypt backup
          backup-encrypt encrypt "${BACKUP_FILE}.tmp"
          mv "${BACKUP_FILE}.tmp" "${BACKUP_FILE}"
          # Clean old backups
          find /backups -type f -mtime +${BACKUP_RETENTION_DAYS} -delete
          sleep 86400
        done'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - rinawarp-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    expose:
      - "9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - rinawarp-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
    expose:
      - "3000"
    depends_on:
      - prometheus
    networks:
      - rinawarp-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  backup-keys:

networks:
  rinawarp-network:
    driver: bridge
