apiVersion: v1
kind: Service
metadata:
  name: rinawarp-loadbalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 3000
    - name: https
      port: 443
      targetPort: 3000
  selector:
    app: rinawarp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rinawarp
  labels:
    app: rinawarp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rinawarp
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: rinawarp
    spec:
      containers:
        - name: rinawarp
          image: rinawarp:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          env:
            - name: NODE_ENV
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: rinawarp-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: rinawarp-secrets
                  key: redis-url
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: rinawarp-secrets
                  key: jwt-secret
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: rinawarp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rinawarp
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 70
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: rinawarp-secrets
type: Opaque
stringData:
  database-url: "postgres://user:password@db:5432/rinawarp"
  redis-url: "redis://redis:6379"
  jwt-secret: "your-jwt-secret"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rinawarp-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - rinawarp.com
      secretName: rinawarp-tls
  rules:
    - host: rinawarp.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rinawarp-loadbalancer
                port:
                  number: 80

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rinawarp
  namespace: default
  labels:
    app: rinawarp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rinawarp
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: rinawarp
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rinawarp
      containers:
        - name: rinawarp
          image: ${ECR_REGISTRY}/rinawarp:${IMAGE_TAG}
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3000"
            - name: LOG_LEVEL
              value: "info"
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: rinawarp-postgres
                  key: host
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: rinawarp-postgres
                  key: port
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: rinawarp-postgres
                  key: database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: rinawarp-postgres
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rinawarp-postgres
                  key: password
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: rinawarp-redis
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: rinawarp-redis
                  key: port
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rinawarp-redis
                  key: password
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: rinawarp-secrets
                  key: jwt-secret
            - name: COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: rinawarp-secrets
                  key: cookie-secret
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 30
            periodSeconds: 10
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - rinawarp
                topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: rinawarp
  namespace: default
  labels:
    app: rinawarp
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: rinawarp
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rinawarp
  namespace: default
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - api.rinawarptech.com
      secretName: rinawarp-tls
  rules:
    - host: api.rinawarptech.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rinawarp
                port:
                  name: http
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rinawarp
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rinawarp
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 4
          periodSeconds: 15
      selectPolicy: Max
